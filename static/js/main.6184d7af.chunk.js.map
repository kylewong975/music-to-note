{"version":3,"sources":["components/upload_audio.js","components/sheet_music_display.js","App.js","serviceWorker.js","index.js"],"names":["buttonStyle","backgroundColor","margin","UploadAudio","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","upload","swal","record","inherits","createClass","key","value","react_default","a","createElement","index_es","className","style","onClick","Audiotrack_default","CloudUpload_default","Component","SheetMusicDisplay","options","viewportHorizontal","responsive","props","console","log","abcjs","renderAbc","tune","id","App","state","music","setState","variant","components_upload_audio","components_sheet_music_display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yXAOIA,UAAc,CACdC,gBAAiB,UACjBC,OAAQ,SAyBGC,EArBf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,OAAS,WACLC,IAAK,YAAa,0BAA2B,YAFrDhB,EAIIiB,OAAS,WACLD,IAAK,YAAa,2BAA4B,YALtDhB,EAAA,OAAAC,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAAC,GAAAG,OAAAkB,EAAA,EAAAlB,CAAAJ,EAAA,EAAAuB,IAAA,SAAAC,MAAA,WAQQ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,iBACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,MAAOjC,EAAakC,QAASzB,KAAKc,QAC1CK,EAAAC,EAAAC,cAACK,EAAAN,EAAD,OAEJD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,MAAOjC,EAAakC,QAASzB,KAAKY,QAC1CO,EAAAC,EAAAC,cAACM,EAAAP,EAAD,YAdpB1B,EAAA,CAAiCkC,8BCOlBC,UAhBf,SAAAlC,GAAA,SAAAkC,IAAA,IAAAjC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,GAAA,QAAA5B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA+B,IAAApB,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACI0B,QAAU,CACNC,oBAAoB,EACpBC,WAAY,UAHpBnC,EAAA,OAAAC,OAAAiB,EAAA,EAAAjB,CAAA+B,EAAAlC,GAAAG,OAAAkB,EAAA,EAAAlB,CAAA+B,EAAA,EAAAZ,IAAA,qBAAAC,MAAA,SAKuBe,GACfC,QAAQC,IAAIF,GACZA,GAASG,IAAMC,UAAU,QAASJ,EAAMK,KAAMtC,KAAK8B,WAP3D,CAAAb,IAAA,SAAAC,MAAA,WAUQ,OACIC,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,cAXpBV,EAAA,CAAuCD,cCyBxBY,6MArBXC,MAAQ,CACJC,MAAO,mMAGP1C,KAAK2C,SAAS,CACVD,MAAO,kWAIX,OACIvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYsB,QAAQ,MAApB,gBAGAzB,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,CAAmBR,KAAMtC,KAAKyC,MAAMC,gBAhBlCd,aCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6184d7af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport {IconButton, Card, LinearProgress} from '@material-ui/core';\nimport Audiotrack from '@material-ui/icons/Audiotrack';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\nimport './styles/upload_audio.css';\n\nlet buttonStyle = {\n    backgroundColor: '#bbbbee',\n    margin: '10px',\n};\n  \n\nexport class UploadAudio extends Component {\n    upload = () => {\n        swal(\"Uploaded!\", \"File has been uploaded!\", \"success\");\n    }\n    record = () => {\n        swal(\"Recorded!\", \"Audio has been recorded!\", \"success\");\n    }\n    render() {\n        return (\n            <Card className=\"button-holder\">\n                <IconButton style={buttonStyle} onClick={this.record}>\n                    <Audiotrack/>\n                </IconButton>\n                <IconButton style={buttonStyle} onClick={this.upload}>\n                    <CloudUpload/>\n                </IconButton>\n            </Card>\n        )\n    }\n}\n\nexport default UploadAudio\n","import React, { Component } from 'react';\nimport abcjs from \"abcjs/midi\";\nimport './styles/sheet_music_display.css';\n\nexport class SheetMusicDisplay extends Component {\n    options = {\n        viewportHorizontal: true,\n        responsive: 'resize',\n    }\n    componentDidUpdate(props){\n        console.log(props);\n        props && abcjs.renderAbc(\"sheet\", props.tune, this.options);\n    }\n    render() {\n        return (\n            <div id=\"sheet\"></div>\n        )\n    }\n}\n\nexport default SheetMusicDisplay\n","import React, { Component } from 'react';\nimport './App.css';\nimport UploadAudio from './components/upload_audio';\nimport SheetMusicDisplay from './components/sheet_music_display';\nimport { Typography } from '@material-ui/core';\n\n\nclass App extends Component {\n    state = {\n        music: 'X:1\\nT: Example\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: Emin\\nD2|:\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|\"D\"FDAD BDAD|FDAD dAFD\"'\n    }\n    componentDidMount(){\n        this.setState({\n            music: 'X:1\\nT: Cooley\\'s\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: Emin\\nD2|:\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|\"D\"FDAD BDAD|FDAD dAFD|\\n\"Em\"EBBA B2 EB|B2 AB defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 D2:|2\"Em\"DEFD E2 gf||\\n|:\"Em\"eB B2 efge|eB B2 gedB|\"D\"A2 FA DAFA|A2 FA defg|\\n\"Em\"eB B2 eBgB|eB B2 defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 gf:|2\"Em\"DEFD E4|]\\n'\n        });\n    }\n    render() {\n        return (\n            <div className=\"app\">\n                <Typography variant=\"h2\">\n                    Music 2 Note\n                </Typography>\n                <UploadAudio />\n                <SheetMusicDisplay tune={this.state.music}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}