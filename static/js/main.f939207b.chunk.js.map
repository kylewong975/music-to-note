{"version":3,"sources":["components/upload_audio.js","components/sheet_music_display.js","App.js","serviceWorker.js","index.js"],"names":["buttonStyle","backgroundColor","margin","audio_form","FormData","server_endpoint","UploadAudio","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","readFile","file","document","getElementById","set","files","value","upload","fetch","method","body","then","response","swal","props","uploadCallback","record","inherits","createClass","key","react_default","a","createElement","index_es","className","style","onClick","Audiotrack_default","CloudUpload_default","type","id","onChange","Component","SheetMusicDisplay","options","viewportHorizontal","responsive","abcjs","renderAbc","tune","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","freq_to_note","19600","20765","22000","23308","24694","26163","27718","29366","31113","32963","34923","36999","39200","41530","44000","46616","49388","52325","55437","58733","62225","65925","69846","get_note","frequency","temp","keys","i","App","state","music","_this2","ref","child","on","snap","setState","val","variant","components_upload_audio","components_sheet_music_display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f939207b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport {IconButton, Card, LinearProgress} from '@material-ui/core';\nimport Audiotrack from '@material-ui/icons/Audiotrack';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\nimport './styles/upload_audio.css';\n\nlet buttonStyle = {\n    backgroundColor: '#bbbbee',\n    margin: '10px',\n};\n\nlet audio_form = new FormData();\nlet server_endpoint = 'http://httprelay.io/link/h53f';\n\nexport class UploadAudio extends Component {\n    readFile = () => {\n        let file = document.getElementById('upload-audio');\n        audio_form.set(\"audio\", file.files[0], file.value);\n    }\n    upload = () => {\n        fetch(server_endpoint, \n            {method: \"POST\", body: audio_form})\n        .then(response => {\n            swal(\"Uploaded!\", \"File has been uploaded!\", \"success\");\n            this.props.uploadCallback('X:1\\nT: Cooley\\'s\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: Emin\\nD2|:\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|');\n        });\n        \n        // this.props.uploadCallback('X:1\\nT: Cooley\\'s\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: Emin\\nD2|:\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|\"D\"FDAD BDAD|FDAD dAFD|\\n\"Em\"EBBA B2 EB|B2 AB defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 D2:|2\"Em\"DEFD E2 gf||\\n|:\"Em\"eB B2 efge|eB B2 gedB|\"D\"A2 FA DAFA|A2 FA defg|\\n\"Em\"eB B2 eBgB|eB B2 defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 gf:|2\"Em\"DEFD E4|]\\n');\n        // this.props.uploadCallback('X:1\\nT: Cooley\\'s\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: Emin|\\n\"Em\"EBBA B2 EB|B2 AB defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 D2:|2\"Em\"DEFD E2 gf||\\n|:\"Em\"eB B2 efge|eB B2 gedB|\"D\"A2 FA DAFA|A2 FA defg|\\n\"Em\"eB B2 eBgB|eB B2 defg|\"D\"afe^c dBAF|1\"Em\"DEFD E2 gf:|2\"Em\"DEFD E4|]\\n');\n    }\n    record = () => {\n        swal(\"Recorded!\", \"Audio has been recorded!\", \"success\");\n    }\n    render() {\n        return (\n            <Card className=\"button-holder\">\n                <IconButton style={buttonStyle} onClick={this.record}>\n                    <Audiotrack/>\n                </IconButton>\n                <label>              \n                    <IconButton style={buttonStyle} onClick={this.upload}>          \n                        <CloudUpload/>\n                    </IconButton>\n                    <input type=\"file\" id=\"upload-audio\" onChange={this.readFile} />\n                </label>\n            </Card>\n        )\n    }\n}\n\nexport default UploadAudio\n","import React, { Component } from 'react';\nimport abcjs from \"abcjs/midi\";\nimport './styles/sheet_music_display.css';\n\nexport class SheetMusicDisplay extends Component {\n    options = {\n        viewportHorizontal: true,\n        responsive: 'resize',\n    }\n    componentDidUpdate(props){\n        abcjs.renderAbc(\"sheet\", props.tune, this.options);\n    }\n    render() {\n        return (\n            <div id=\"sheet\"></div>\n        )\n    }\n}\n\nexport default SheetMusicDisplay\n","import React, { Component } from 'react';\nimport './App.css';\nimport UploadAudio from './components/upload_audio';\nimport SheetMusicDisplay from './components/sheet_music_display';\nimport { Typography } from '@material-ui/core';\nimport * as firebase from 'firebase';\n\nvar config = {\napiKey: \"AIzaSyDk8JlKOhj0xAc8HM5Q9gDwvybpQta90D4\",\nauthDomain: \"hacktech2019-233403.firebaseapp.com\",\ndatabaseURL: \"https://hacktech2019-233403.firebaseio.com\",\nprojectId: \"hacktech2019-233403\",\nstorageBucket: \"hacktech2019-233403.appspot.com\",\nmessagingSenderId: \"1080115241329\"\n};\n\nfirebase.initializeApp(config);\nconst db = firebase.database();\n\nconst freq_to_note = {\n    19600:  ` G ` ,\n    20765:  ` ^G ` ,\n    22000:  ` A ` ,\n    23308:  ` ^A ` ,\n    24694:  ` B ` ,\n    26163:  ` c ` ,\n    27718:  ` ^c ` ,\n    29366:  ` d ` ,\n    31113:  ` ^d ` ,\n    32963:  ` e ` ,\n    34923:  ` f ` ,\n    36999:  ` ^f ` ,\n    39200:  ` g ` ,\n    41530:  ` ^g ` ,\n    44000:  ` a ` ,\n    46616:  ` ^a ` ,\n    49388:  ` b ` ,\n    52325:  ` c' ` ,\n    55437:  ` ^c' ` ,\n    58733:  ` d' ` ,\n    62225:  ` ^d' ` ,\n    65925:  ` e' ` ,\n    69846:  ` f' ` ,\n}\n\nfunction get_note(frequency){\n    let temp = 0;\n    let keys = Object.keys(freq_to_note);\n    for(let i = 0; i < keys.length; i++){\n        if(frequency > keys[i]){\n            temp = keys[i];\n        }else{\n            return (keys[i] - frequency < frequency - temp) ? freq_to_note[keys[i]] : freq_to_note[temp];\n        }\n    }\n}\n\nclass App extends Component {\n    state = {\n        music: 'X:1\\nT: Example\\nM: 4/4\\nL: 1/8\\nR: reel\\nK: C\\nD2|:\"Em\"EB{c}BA B2 EB|~B2 AB dBAG'\n    };\n\n    componentDidMount(){\n        const noteRef = db.ref().child('note');\n        noteRef.on('value', snap => {\n            this.setState( state => ({\n                music: state.music + get_note(snap.val()*100)\n            }));\n        });\n    }\n    // update = (param) => {\n    //     this.setState({\n    //         music: param\n    //     });\n    // }\n    // uploadCallback={this.update}\n    render() {\n        return (\n            <div className=\"app\">\n                <Typography variant=\"h2\">\n                    Music 2 Note\n                </Typography>\n                <UploadAudio />\n                <SheetMusicDisplay tune={this.state.music}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}